{"version":3,"file":"functionssWorker.js","mappings":"kPAkEA,SAASA,EAAKC,GAEV,IADA,IAAIC,EAAM,EACDC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxBD,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,aACtG,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAGM,IACnBL,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,YAE9G,CACA,OAAOJ,CACX,CAGA,SAASM,EAAaP,GAClB,OAAO,IAAIQ,SAAQ,SAASC,EAASC,GACjCC,YAAW,WACPF,EAAQV,EAAKC,GACjB,GAAG,IACP,GACJ,CAEA,SAASY,EAAWZ,GAChB,MAAM,IAAIa,KACd,CAEA,SAASC,EAAmBd,GACxB,OAAOQ,QAAQE,OAAO,IAAIG,MAC9B,CAzFAE,KAAKC,iBAAiB,WAClB,SAASC,GACL,IAAIC,EAAMD,EAAME,KACG,iBAARD,IACPA,EAAME,KAAKC,MAAMH,IAGrB,IAAMI,EAAQJ,EAAII,MAClB,IACI,IAAMC,EAoClB,SAAwBC,EAAMC,GAC1B,GAAY,QAARD,EACA,OAAOzB,EAAK2B,MAAM,KAAMD,GAEvB,GAAY,gBAARD,EACL,OAAOjB,EAAamB,MAAM,KAAMD,GAE/B,GAAY,cAARD,EACL,OAAOZ,EAAWc,MAAM,KAAMD,GAE7B,GAAY,sBAARD,EACL,OAAOV,EAAmBY,MAAM,KAAMD,GAGtC,MAAM,IAAIZ,MAAM,gBAExB,CApD2Bc,CAAeT,EAAIM,KAAMN,EAAIO,YAEtB,mBAAXF,GAA2C,UAAlBK,EAAOL,IAA8C,mBAAhBA,EAAOM,KAC5EN,EAAOM,MAAK,SAASC,GACjBC,YACI,CACIT,MAAOA,EACPC,OAAQO,GAGpB,IACCE,OAAM,SAASC,GACZF,YACI,CACIT,MAAOA,EACPY,OAAO,GAGnB,IAGAH,YAAY,CACRT,MAAOA,EACPC,OAAQA,GAGpB,CACA,MAAMU,GACFF,YAAY,CACRT,MAAOA,EACPY,OAAO,GAEf,CACJ,G","sources":["webpack://excel-custom-functions-js/./src/functions/functions-worker.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nself.addEventListener('message',\r\n    function(event) {\r\n        let job = event.data;\r\n        if (typeof(job) == \"string\") {\r\n            job = JSON.parse(job);\r\n        }\r\n\r\n        const jobId = job.jobId;\r\n        try {\r\n            const result = invokeFunction(job.name, job.parameters);\r\n            // check whether the result is a promise.\r\n            if (typeof(result) == \"function\" || typeof(result) == \"object\" && typeof(result.then) == \"function\") {\r\n                result.then(function(realResult) {\r\n                    postMessage(\r\n                        {\r\n                            jobId: jobId,\r\n                            result: realResult\r\n                        }\r\n                    );\r\n                })\r\n                .catch(function(ex) {\r\n                    postMessage(\r\n                        {\r\n                            jobId: jobId,\r\n                            error: true\r\n                        }\r\n                    )\r\n                });\r\n            }\r\n            else {\r\n                postMessage({\r\n                    jobId: jobId,\r\n                    result: result\r\n                });\r\n            }\r\n        }\r\n        catch(ex) {\r\n            postMessage({\r\n                jobId: jobId,\r\n                error: true\r\n            });\r\n        }\r\n    }\r\n);\r\n\r\nfunction invokeFunction(name, parameters) {\r\n    if (name == \"TEST\") {\r\n        return test.apply(null, parameters);\r\n    }\r\n    else if (name == \"TEST_PROMISE\") {\r\n        return test_promise.apply(null, parameters);\r\n    }\r\n    else if (name == \"TEST_ERROR\") {\r\n        return test_error.apply(null, parameters);\r\n    }\r\n    else if (name == \"TEST_ERROR_PROMISE\") {\r\n        return test_error_promise.apply(null, parameters);\r\n    }\r\n    else {\r\n        throw new Error(\"not supported\");\r\n    }\r\n}\r\n\r\nfunction test(n) {\r\n    let ret = 0;\r\n    for (let i = 0; i < n; i++) {\r\n        ret += Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));\r\n        for (let l = 0; l < n; l++) {\r\n            ret -= Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));     \r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\n\r\nfunction test_promise(n) {\r\n    return new Promise(function(resolve, reject) {\r\n        setTimeout(function() {\r\n            resolve(test(n));\r\n        }, 1000);\r\n    });\r\n}\r\n\r\nfunction test_error(n) {\r\n    throw new Error();\r\n}\r\n\r\nfunction test_error_promise(n) {\r\n    return Promise.reject(new Error());\r\n}"],"names":["test","n","ret","i","Math","tan","atan","l","test_promise","Promise","resolve","reject","setTimeout","test_error","Error","test_error_promise","self","addEventListener","event","job","data","JSON","parse","jobId","result","name","parameters","apply","invokeFunction","_typeof","then","realResult","postMessage","catch","ex","error"],"sourceRoot":""}